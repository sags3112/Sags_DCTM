{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\f0\fs20 27836\par
\pard\sb100\sa100\b\f1\fs24 Subject:\b0  \par
\trowd\trgaph10\trleft-10\trpaddl10\trpaddr10\trpaddfl3\trpaddfr3
\clvertalc\cellx9350\pard\intbl\sb100\sa100 All you ever wanted to know about SiteMinder policy server and the documentum integration to provide SSO capabilities \cell\row\pard\sb100\sa100\f0\fs20{\pict\wmetafile8\picwgoal4320\pichgoal15 
0100090000034c00000003001c00000000000400000003010600050000000c021a00c41d070000
00fc020000000000000000040000002d01000008000000fa020000000000000000000004000000
2d0101001c000000fb020c00090000000000900100000000000202024d532053616e7320536572
6966000a0027008a0100000000ffffffff78d31300040000002d010200030000000000
}\b\f1\fs24 Note:\b0  \par
\trowd\trgaph10\trleft-10\trpaddl10\trpaddr10\trpaddfl3\trpaddfr3
\clvertalc\cellx9350\pard\intbl\sb100\sa100 @@@ INTERNAL @@@@ \line\line SiteMinder General Information: \line --------------------------------------- \line\line SiteMinder Policy Server \line\line The SiteMinder Policy Server is the heart of SiteMinder. This high-performance, multi-threaded server provides load balancing, failover, and caching for superior reliability and speed. It typically runs on a separate NT or UNIX system, and performs the key security operations that SiteMinder provides, including: \line\line Authentication Services: \line The Policy Server supports a range of authentication methods to meet the unique needs of each environment. Since no authentication technique is generally right for all types of users and applications, it is important that any security technology provide authentication flexibility. SiteMinder supports a variety of authentication schemes including basic username/password authentication, HTML forms-based authentication, certificate-based authentication, token based authentication, NTLM, and/or combinations of them, as well as custom authentication schemes. For a complete list of authentication schemes supported by SiteMinder, please refer to SiteMinder Authentication Management section of this white paper. \line\line Authorization Services: \line The Policy Server manages and enforces access control policies that define the operations that are allowed for each protected resource. SiteMinder can protect URL\'bfs via its web-agents, J2EE resources via its application server agents or any string resource via its API. In addition, rules may be constrained by time, to prevent access outside specified periods, or by specific IP addresses. \line\line Auditing Services: \line The Policy Server also generates log files that contain auditing information about the events that occurred within the system. Administrators can view text based logs with a standard browser or use the SiteMinder provided reporting tools to view database based logs in pre-defined or user-defined reports, enabling them to analyze and correct security events and anomalies. Operators can define the types of activities to be logged and where that information will reside \'bf such as in a SQL/ODBC database or a text file. \line\line SiteMinder Agents: \line A SiteMinder Agent communicates with the Policy Server to authenticate users and authorize access to resources. This plug-in component is SiteMinder\'bfs policy enforcement point and integrates with Web servers, application servers, or custom applications to enforce access control based on pre-defined policies. There are several types of agents with SiteMinder: \line\line\line\line SITEMINDER INTEGRATION \line ============================== \line\line The integration consists of two pieces: \line\line 1.) The server side mechanism: \line\line The plugins will take initialization parameters from an initialization file located in the same directory as the module. The file contains all the parameters required to connect to the SSO Server, such as host name and ports. The authentication plugins expects the following input parameters: user_os_name, user_name, user_ldap_dn and session cookie. The parameters user_os_name and session cookie are the values that were passed in the DMCL connect call (via WDK), the other ones are determined by the server before calling the module. In the case of Netegrity, the SiteMinder Agent API is then used to extract the session specification from the SMSESSION cookie and validate it against the Policy Server. In the same way, the RSA plugin will perform a similar operation with the ClearTrust API against the ClearTrust Authorization Server. Both plugins will also verify that either the user_name, user_os_name or user_ldap_dn of the user provided matches the distinguished name that was decoded from the cookie. In order for the authentication plugin to be called, the client (i.e. WDK) will have to include the identifier of the plugin (e.g. dm_netegrity). This will direct the server to call the appropriate plugin. \line\line 2.) WDK: \line\line WDK code that extracts the authentication token of the SSO product from a session context and passes it to the server Pluggable module on the eContent Server that authenticates the token against the SSO Server Please refer to an upcoming WDK specification for the client side. \line\line\line\line CONTENT SERVER SIDE ---PART 1--- \line ================================================================================================ \line\line\line Give the steps to do the install of the plugin (from the readme.txt file) in \line\line C:\\Documentum\\product\\5.2\\install\\external_apps\\authplugins\\netegrity \line\line STEP 1- \line *** \line Documentum Netegrity Authentication Plugin 'dm_netegrity' \line ========================================================= \line The Documentum Netegrity Authentication Plugin allows the Documentum Content Server to authenticate users based on Netegrity Single Sign-On tokens instead of passwords. This enables Documentum web application for Netegrity Single Sign-On. In order to use this plugin, it is necessary to purchase the Netegrity SiteMinder product. \line\line\line To install the Documentum Netegrity authentication plugin, follow these instructions: \line\line 1. Copy the file \line dm_netegrity_auth.dll (Windows) or \line dm_netegrity_auth.so (Solaris or AIX) \line dm_netegrity_auth.sl (HPUX) \line to the authentication plugin location (usually $DOCUMENTUM/dba/auth). \line\line 2. Copy the file dm_netegrity_auth.ini to the same location. \line Edit this file and set all mandatory parameters. \line\line 3. Copy the supporting shared libraries: \line Windows: copy the file SmAgentAPI.dll to %DM_HOME%\\bin \line Solaris/AIX: copy the file libsmagentapi.so to $DM_HOME/bin \line HPUX: copy the file libsmagentapi.sl to $DM_HOME/bin \line\line 4. Restart the docbase. You can verify that the plugin has been loaded by looking in the main server log file ($DOCUMENTUM/dba/log/<docbase>.log) for an entry starting with "[DM_SESSION_I_AUTH_PLUGIN_LOADED]info". \line\line\line STEP 2 - Restart the documentum server \line\line STEP 3 - Check the server log for a successful installation. It should look like the following. \line\line Wed Jan 07 09:54:52 2004 553000 [DM_SESSION_I_AUTH_PLUGIN_LOADED]info: "Loaded Authentication Plugin with code 'dm_netegrity' (C:\\DOCUMENTUM\\dba\\auth\\dm_netegrity_auth.dll)." \line\line STEP 4 - If you see the following it was not installed successfully.: \line\line Mon Sep 29 09:29:13 2003 547822 [DM_SESSION_I_INIT_BEGIN]info: "Initialize Authentication Plugins." \line Mon Sep 29 09:29:14 2003 590578 [DM_SESSION_E_AUTH_PLUGIN_LOAD_INIT_ERROR]error: "Failed to load Authentication Plugin /opt/dmadmin/dba/auth/dm_netegrity_auth.so. Plugin initialization returned error: 'Failed to obtain server connection!'." \line\line\line This completes the server-side installation. Refer to the WDK documentation to setup the application server side. \line\line APPLICATION SERVER SIDE ---PART 2--- \line ================================================================================================= \line\line From page 38 of the WDK Development guide \line\line Modify the appropriate app.xml file \line\line\line <authentication> Elements \line\line Element Description \line ======= ================== \line <docbase> Default Docbase name \line <domain> Windows network domain name \line <service_class> Fully qualified name of class that provides \line authentication service. This class might perform pre or \line post-processing of authentication. \line <sso_config> Single sign-on authentication configuration elements \line (unsupported) \line <sso_config>. \line <ecs_plug_in> Name of the Docbase authentication plugin. Valid \line values: dm_netegrity | dm_rsa (unsupported) \line <sso_config>. \line <ticket_cookie> Name of vendor-specific cookie that holds the \line sign-on ticket, for example, SMSESSION (Netegrity) \line (unsupported) \line <sso_config>. \line <user_header> Name of vendor-specific header that holds the \line user name, for example, SM-USER (Netegrity) \line (unsupported) \line\line From the app.xml file in : \line\line G:\\Program Files\\Documentum\\tomcat\\4.0.6\\webapps\\da\\wdk\\app.xml \line G:\\Program Files\\Documentum\\tomcat\\4.0.6\\webapps\\wp\\wdk\\app.xml \line G:\\Program Files\\Documentum\\tomcat\\4.0.6\\webapps\\webtop\\wdk\\app.xml \line\line Question? \line\line Which app.xml file must be modified? Everything under that webapps directory b/c they will represent all the web applications that you have installed. They each have their own app.xml so you will modify in my case all 3 as above. \line\line\line app.xml \line <authentication> \line <!-- Default domain and docbase to authenticate against --> \line <domain>NTDomHost<domain/> \line <docbase>WinOrc52<docbase/> \line\line <!-- Class that provide the authentication service --> \line\line <service_class>com.documentum.web.formext.session.AuthenticationService</service_class> \line\line <!-- Single Sign-On authentication scheme configuration --> \line <sso_config> \line <ecs_plug_in>dm_netegrity<ecs_plug_in/> \line <ticket_cookie>SMSESSION<ticket_cookie/> \line <user_header>SM_USER<user_header/> \line </sso_config> \line\line </authentication> \line\line\line\line\line After making changes to the app.xml... \line\line - make sure the changes are being read correctly (re-start of the application server is required) \line\line\line TROUBLESHOOTING \line ==================================================================================== \line\line 1.) Available Logs: \line\line -there is a dm_netegrity_<docbase_name>.log - that will be written to the $DOCUMENTUM/dba/log directory, BUT it will only be written if you have turned on -otrace_authentication \line\line 2.) If the install and subsequent configuration of the app.xml is done and still have problems: \line\line API Connect: \line\line The following is an example of a connect call that would be issued by WDK: \line\line a.) API>connect,<docbase_name>,<user_name>,DM_PLUGIN=dm_netegrity/<token from siteminder> \line\line so ask them to login In API as the install owner then issue the above connect call and see what happens. \line\line <token from siteminder> looks something like this: \line\line b.) API> connect,DocBase,admin,DM_PLUGIN=dm_netegrity/hRcDamugl+nx/uclchzMJlxDQAtGCk \line zyrmUHVQZEyx4hANQgJMnS38rGsC/alR50hA79SlZcJJpeecbx42jAGhajQMurQUciymXlTMVw+LvQra \line 2K7PrtttMZh/KBGj+msNCBB4nq8XRRwysAydFRXkkQKaCdx1CNnrRPUztF29z5/ND5U2v1Rm9qaa+QLD \line 3nAww2HB4hZYmVK71HI93wGn0dDwBPLACM3w+3UTDYMucDQrI/lY8XfX9+gHK1bdjnYl2rcOiBrR7WRw \line TKBpdkllcl6e1LpVRUXWoQ3Hxbu65QVDq1Dw6mRM7IB4fIwT54EyakzYoDG1QVomLX7iWriiI3REtNfh \line ptd2Nz5WFg8hG/wdhKD8uAyRMb1kAcQlx/Jcg5of38k9cGE+cJpDe5FCoC2yCR40barxx/KyKHo7NO8R \line VwjfHF2RlMhaJOwYV7MZ8NB3NSAW0v5owJmi/7PmfMnC+7n8JabuAsnLAYvZlA77rSF054WDXb+moQ3I \line lcVAfKAUTreLa77GFvHE5UPKwnZLyBgV0iYKRQhP6tGMzlG6lSglnL9WUszWtT3DavsN2KjLcqxUm6rl \line Py7aLkDa12jUJKqlC7/P7YNcfNe5ChDhiTkGbPZ56zFjIKU7y3nIh9/+YcXa8MMOib6CZIWMMXuNMI/y \line Fcz+TC1Dhk63nPeJe35zg1qkr2DM6To0VLgB8GO2i7rKOxj0MuUlXZW85bDH427PU+T1CBpxxfKttq2G \line di/WykPTqqsWENsoetAgTg94iTv2WR44rkjWCzgerocQ2jKwThFWtIkP5A+cip1kqYN2Yq06MTYCfaZV \line 1WFAmUjjGdxLfjzUsduFw5N7MAMuNlCZkNn0DXq46+D/IrUJAsR9tfvX7ibLvjHAFdKXMgNXyc7GlyjY \line QpYhmR+K+Nq6gD6xAp \line\line 3.) If you see this error: \line\line Thu Sep 18 12:30:35 2003 010343 [DM_SESSION_E_AUTH_PLUGIN_LOAD_INIT_ERROR]error: \line "Failed to load Authentication Plugin /opt/dmadmin/dba/auth/dm_netegrity_auth.so. Plugin initialization returned error: 'Failed to obtain server connection!'." \line\line Solution: \line Make sure the checkbox for "Support 4.x Agents" is selected on the Siteminder Agent Dialog (Show screenshot from the Case Attachments folder, case # 311324 - siteminder.jpg) \line\line 4.) If you get the SM_APIAGENT_FAILURE error: \line\line 01/08/04 13:37:23 Authentication-gmelendez001: Failure. Error message is: Validation failed. Failed to decode token due to an API failure (SM_AGENTAPI_FAILURE) \line\line Solution: \line If everything else looks in place you might want to check that there is actually a user in the docbase for the user attempting to login vcia the policy server/plugin. Unlike in LDAP where we do an import of the users from an ldap server into the docbase, this adding of users from the policy server has to be done by the ct, probably through a script. The dm_user account must exist in the docbase and must match the user on the policy server otherwise you will get error like the above "Validation Failed" message. \line\line Remember that to this point we are supporting the ct to get the dctm piece configured. After this there is a required CUSTOMIZATION that has to be done to get the final connection to work. The customization essentially grabs the token from the policy server and passes it to a connect method and issues that api with the token as an argument. Once it has the token and issues the connect, the api should allow a connection and you are done. \line one. \line\cell\row\pard\sb100\sa100\par
\pard\f0\fs20\par
}
 